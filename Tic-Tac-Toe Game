import pygame
import sys

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 300, 300
LINE_COLOR = (0, 0, 0)
LINE_WIDTH = 15
CELL_SIZE = WIDTH // 3
FPS = 30

# Colors
WHITE = (255, 255, 255)
PLAYER_X_COLOR = (255, 0, 0)
PLAYER_O_COLOR = (0, 0, 255)

# Create the screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tic-Tac-Toe")

# Initialize the game board
board = [[' ' for _ in range(3)] for _ in range(3)]

def draw_board():
    # Draw horizontal lines
    for i in range(1, 3):
        pygame.draw.line(screen, LINE_COLOR, (0, i * CELL_SIZE), (WIDTH, i * CELL_SIZE), LINE_WIDTH)
    
    # Draw vertical lines
    for i in range(1, 3):
        pygame.draw.line(screen, LINE_COLOR, (i * CELL_SIZE, 0), (i * CELL_SIZE, HEIGHT), LINE_WIDTH)

def draw_x(row, col):
    x_pos = col * CELL_SIZE + CELL_SIZE // 2
    y_pos = row * CELL_SIZE + CELL_SIZE // 2
    half_size = CELL_SIZE // 2 - 10
    pygame.draw.line(screen, PLAYER_X_COLOR, (x_pos - half_size, y_pos - half_size), (x_pos + half_size, y_pos + half_size), 5)
    pygame.draw.line(screen, PLAYER_X_COLOR, (x_pos + half_size, y_pos - half_size), (x_pos - half_size, y_pos + half_size), 5)

def draw_o(row, col):
    x_pos = col * CELL_SIZE + CELL_SIZE // 2
    y_pos = row * CELL_SIZE + CELL_SIZE // 2
    radius = CELL_SIZE // 2 - 10
    pygame.draw.circle(screen, PLAYER_O_COLOR, (x_pos, y_pos), radius, 5)

def draw_symbols():
    for row in range(3):
        for col in range(3):
            if board[row][col] == 'X':
                draw_x(row, col)
            elif board[row][col] == 'O':
                draw_o(row, col)

def check_winner():
    # Check rows
    for row in board:
        if len(set(row)) == 1 and row[0] != ' ':
            return row[0]

    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != ' ':
            return board[0][col]

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return board[0][2]

    return None

def is_board_full():
    for row in board:
        if ' ' in row:
            return False
    return True

def main():
    clock = pygame.time.Clock()

    # Current player ('X' or 'O')
    current_player = 'X'

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if pygame.mouse.get_pressed()[0]:
                    # Get the mouse position
                    mouseX, mouseY = pygame.mouse.get_pos()

                    # Calculate the clicked cell
                    col = mouseX // CELL_SIZE
                    row = mouseY // CELL_SIZE

                    # Check if the cell is empty
                    if board[row][col] == ' ':
                        board[row][col] = current_player
                        winner = check_winner()

                        if winner:
                            print(f"Player '{winner}' wins!")
                            pygame.quit()
                            sys.exit()
                        elif is_board_full():
                            print("It's a tie!")
                            pygame.quit()
                            sys.exit()

                        # Switch players
                        current_player = 'O' if current_player == 'X' else 'X'

        screen.fill(WHITE)
        draw_board()
        draw_symbols()
        pygame.display.flip()

        clock.tick(FPS)

if __name__ == "__main__":
    main()
